//Sarthak Kalia
//21105042


#include <iostream>
#include <bits/stdc++.h>
using namespace std;

/*
QUESTION:How would you search for an element in an array/list whose size is unknown?
SOLUTION: We can search an element in an array whose size is unknown in O(logn) time complexity given that the array is in sorted order .This can be done via modifications in binary search method of searching.
The concept behind the approach used:
  ->Take inital value of initial as 0 and end as 1.
  ->Now increase end to end*2 until arr[end] exceed the key to be searched.
  ->Now search the key using binary search between initial and end.
*/

// Simple Binary Search Function
int binary_search(int arr[], int initial, int end, int key)
{
    int mid = (initial + end) / 2; // mid=middle element
    while (initial <= end)
    { // initial=starting index end=ending index
        if (arr[mid] == key)
        {
            return mid;
        } // if key to be searched is present we will return index of the key
        else
        {
            if (arr[mid] < key)
            {
                initial = mid + 1;
            }
            else
            {
                end = mid - 1;
            }
        }
        mid = (initial + end) / 2;
    }
    return -1; // when element is not present we will return -1
}
// Enhanced binary search function or Binary search for array with unknown lenght
int binary_search_unknown(int arr[], int key)
{
    // Initializing initial as 0 and end as 1.
    int initial = 0, end = 1;
    // We will increase end until arr[end] exceeds key to be searched.
    while (arr[end] < key)
    {
        initial = end;
        end = 2 * end;
    }
    // Now calling Simple Binary Search on range initial to end.
    return binary_search(arr, initial, end, key);
}
